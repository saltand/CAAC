{"version":3,"sources":["../src/api.ts","../src/utils.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["/**\n * Cat API client for fetching random cat images\n */\n\nimport type { CatImageData, CatApiResponse } from './types';\n\nconst CAT_API_URL = 'https://api.thecatapi.com/v1/images/search';\n\n/**\n * Fetches a random cat image from The Cat API\n * \n * @param apiKey - Optional API key for authentication\n * @returns Promise resolving to CatApiResponse with data, error, and loading state\n */\nexport async function fetchCatImage(apiKey?: string): Promise<CatApiResponse> {\n  // Check if fetch is available (SSR compatibility)\n  if (typeof fetch === 'undefined') {\n    return { \n      data: null, \n      error: new Error('fetch is not available in this environment'), \n      loading: false \n    };\n  }\n\n  try {\n    const headers: Record<string, string> = {};\n    \n    // Add API key if provided\n    if (apiKey) {\n      headers['x-api-key'] = apiKey;\n    }\n\n    const response = await fetch(CAT_API_URL, {\n      method: 'GET',\n      headers,\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n\n    // CRITICAL: Cat API returns array with single object\n    const data = await response.json() as CatImageData[];\n    \n    if (!data || !Array.isArray(data) || data.length === 0) {\n      throw new Error('No cat image data received from API');\n    }\n\n    const catData = data[0];\n    \n    // Validate required fields\n    if (!catData.url || !catData.id) {\n      throw new Error('Invalid cat image data received');\n    }\n\n    return { \n      data: catData, \n      error: null, \n      loading: false \n    };\n    \n  } catch (error) {\n    return { \n      data: null, \n      error: error instanceof Error ? error : new Error('Unknown error occurred'),\n      loading: false \n    };\n  }\n}","/**\n * Utility functions for CAAC components\n */\n\n/**\n * Checks if code is running in a browser environment\n * Useful for SSR compatibility\n */\nexport function isBrowser(): boolean {\n  return typeof window !== 'undefined' && typeof document !== 'undefined';\n}\n\n/**\n * Checks if code is running on the client side\n * Nuxt-specific check\n */\nexport function isClient(): boolean {\n  return typeof process === 'undefined' || (process as any).client === true;\n}\n\n/**\n * Normalizes dimension value to CSS-compatible string\n * \n * @param value - Dimension value (string or number)\n * @returns CSS-compatible dimension string\n */\nexport function normalizeDimension(value: string | number | undefined): string {\n  if (value === undefined) return 'auto';\n  if (typeof value === 'number') return `${value}px`;\n  return value;\n}\n\n/**\n * Generates a unique component ID\n * \n * @param prefix - Optional prefix for the ID\n * @returns Unique string ID\n */\nexport function generateId(prefix = 'caac'): string {\n  return `${prefix}-${Math.random().toString(36).substr(2, 9)}`;\n}\n\n/**\n * Safely parses environment variables for API configuration\n * \n * @param envKey - Environment variable key\n * @returns Environment variable value or undefined\n */\nexport function getEnvVar(envKey: string): string | undefined {\n  if (typeof process !== 'undefined' && process.env) {\n    return process.env[envKey];\n  }\n  return undefined;\n}\n\n/**\n * Debounces a function call\n * \n * @param func - Function to debounce\n * @param delay - Delay in milliseconds\n * @returns Debounced function\n */\nexport function debounce<T extends (...args: any[]) => any>(\n  func: T, \n  delay: number\n): (...args: Parameters<T>) => void {\n  let timeoutId: NodeJS.Timeout | null = null;\n  \n  return (...args: Parameters<T>) => {\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n    }\n    \n    timeoutId = setTimeout(() => {\n      func(...args);\n    }, delay);\n  };\n}"]}